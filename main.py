import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_states = {}  # user_id: dict

def get_main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É"))
    kb.add(KeyboardButton("–ú–æ–∏ –≥—Ä—É–ø–ø—ã"))
    return kb

def get_back_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ù–∞–∑–∞–¥"))
    return kb

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_states[message.from_user.id] = {}
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã —Å —Ç–≤–æ–∏–º–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

@dp.message_handler(lambda msg: msg.text == "–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É")
async def ask_group_name(message: types.Message):
    user_states[message.from_user.id] = {'step': 'create_group'}
    await message.reply("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:", reply_markup=get_back_menu())

@dp.message_handler(lambda msg: msg.text == "–ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    user_states[message.from_user.id] = {}
    await message.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu())

@dp.message_handler(lambda msg: msg.text == "–ú–æ–∏ –≥—Ä—É–ø–ø—ã")
async def show_groups(message: types.Message):
    user_id = str(message.from_user.id)
    groups_dir = f'images/{user_id}'
    if not os.path.exists(groups_dir) or not os.listdir(groups_dir):
        await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã.", reply_markup=get_main_menu())
        return
    groups = os.listdir(groups_dir)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for g in groups:
        kb.add(KeyboardButton(g))
    kb.add(KeyboardButton("–ù–∞–∑–∞–¥"))
    user_states[message.from_user.id] = {'step': 'choose_group'}
    await message.reply("–¢–≤–æ–∏ –≥—Ä—É–ø–ø—ã:", reply_markup=kb)

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get('step') == 'create_group')
async def create_group(message: types.Message):
    group_name = message.text.strip()
    if not group_name.isalnum():
        await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞:")
        return
    user_id = str(message.from_user.id)
    os.makedirs(f'images/{user_id}/{group_name}', exist_ok=True)
    user_states[message.from_user.id] = {'step': 'wait_image', 'group': group_name}
    await message.reply(
        f"–ì—Ä—É–ø–ø–∞ '{group_name}' —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É.",
        reply_markup=get_back_menu()
    )

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    state = user_states.get(message.from_user.id)
    if not state or state.get('step') != 'wait_image':
        await message.reply("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –≥—Ä—É–ø–ø—É.", reply_markup=get_main_menu())
        return
    group = state['group']
    user_id = str(message.from_user.id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ
    os.makedirs(f'images/{user_id}/{group}', exist_ok=True)
    photo = message.photo[-1]
    temp_path = f'images/{user_id}/{group}/temp.jpg'
    await photo.download(destination_file=temp_path)
    user_states[message.from_user.id].update({'step': 'wait_image_name', 'temp_path': temp_path})
    await message.reply("–ö–∞–∫ –Ω–∞–∑–≤–∞—Ç—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ? (–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã)", reply_markup=get_back_menu())

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get('step') == 'wait_image_name')
async def set_image_name(message: types.Message):
    name = message.text.strip()
    if not name.isalnum():
        await message.reply("–ò–º—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞:")
        return
    state = user_states[message.from_user.id]
    group = state['group']
    user_id = str(message.from_user.id)
    temp_path = state['temp_path']
    new_path = f'images/{user_id}/{group}/{name}.jpg'
    os.rename(temp_path, new_path)
    await message.reply(
        f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É '{group}'!\n–û—Ç–ø—Ä–∞–≤—å –µ—â—ë –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏ '–ù–∞–∑–∞–¥'.",
        reply_markup=get_back_menu()
    )
    user_states[message.from_user.id]['step'] = 'wait_image'
    user_states[message.from_user.id].pop('temp_path', None)

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get('step') == 'choose_group')
async def choose_group(message: types.Message):
    group = message.text.strip()
    user_id = str(message.from_user.id)
    group_path = f'images/{user_id}/{group}'
    if not os.path.exists(group_path):
        await message.reply("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu())
        user_states[message.from_user.id] = {}
        return
    images = [img for img in os.listdir(group_path) if img.endswith('.jpg')]
    if not images:
        await message.reply("–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫.", reply_markup=get_back_menu())
        return
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for img in images:
        kb.add(KeyboardButton(img.rsplit('.', 1)[0]))
    kb.add(KeyboardButton("–ù–∞–∑–∞–¥"))
    user_states[message.from_user.id] = {'step': 'show_image', 'group': group}
    await message.reply(f"–ö–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –≥—Ä—É–ø–ø–µ '{group}':", reply_markup=kb)

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get('step') == 'show_image')
async def send_image(message: types.Message):
    image_name = message.text.strip()
    state = user_states[message.from_user.id]
    group = state['group']
    user_id = str(message.from_user.id)
    image_path = f'images/{user_id}/{group}/{image_name}.jpg'
    if not os.path.exists(image_path):
        await message.reply("–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_back_menu())
        return
    with open(image_path, 'rb') as photo:
        await bot.send_photo(message.chat.id, photo, caption=f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ '{image_name}' –∏–∑ –≥—Ä—É–ø–ø—ã '{group}'")
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ü–∏–∏ "–£–¥–∞–ª–∏—Ç—å" –∏ —Ç.–¥.

if __name__ == "__main__":
    os.makedirs("images", exist_ok=True)
    executor.start_polling(dp, skip_updates=True)
